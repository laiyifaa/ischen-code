classname-paradigm:{
M:mid
D:difficulty

Ischen:good question

example :
IschenMxxxxxxx:中等难度的好题
Dxxxx:难题
Mxxxx:中等题
}


tips:

             java 中int 的范围 简介 int的取值范围为： -2^31——2^31-1，即-2147483648——2147483647  1e10

             long  -9223372036854774808~9223372036854774807  1e19
            /**
                  *
                  *  swap
                  * a = a + b;
                    b = a - b;
                    a = a - b;

                   (仅限整数）
                    a = a ^ b;//^异或运算
                    b = a ^ b;//
                    a = a ^ b;
            */
            前置++效率比后置++高 即++a > a++
            byte[] used 数组做记录
            String.contain()用的是KMP 是最快的包含函数 o(n)
            二分注意 l<r l<=r(lai) ｛ if（a[mid] > k） l = mid +1 else r = mid -1 ｝ l-1 ,
            二分答案的最大最小值  注意 确定好 l和r的最大值 然后二分答案 确认是否匹配 然后根据条件变动 区间
            26个字母 = 26个素数

            排序后保留原来索引 leetcode 2542. 最大子序列的分数

            查找 还有Z字型查找 MIsChen_searchMatrix leetcode 240.

            数组可以开左右数组  334. 递增的三元子序列

            找众数 投票法 169. 多数元素 且数字大于n/2
            分治：33
            回溯：全排列46  BFS+回溯 二叉搜索树序列
            双层DFS： 面试题 04.10. 检查子树  124. 二叉树中的最大路径和
            //保留2位小数
                double num = 3.1415926;
                BigDecimal bd = new BigDecimal(num);
                num = bd.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
                System.out.println(num);
            // String StringBuilder StringBuffer(并发)
            反复new String 不如 new StringBUilder 如果能 记录 l,r 不如 s.subString(l,r+1)
数据结构 ：
            1109. 航班预订统计 面试题 16.10. 生存人数

            差分数组：支持多次改变前缀和，减少改变前缀和的操作复杂度
                构造差分数组，区间操作改为对差分数组头尾的2次操作，最后可通过差分数组复原数组
                https://www.bilibili.com/video/BV1NY4y1J7xQ/
            树状数组：MStreamRank
                https://www.bilibili.com/video/BV1pE41197Qj 支持区间修改，单点查询 | 区间修改 区间查询
                lowbit:非负整数n在二进制表示下最低位1及其后面0构成的数值 。lowbit(44) = lowbit(101100) = 100 = 4
                    return x & (-x);  树状数组每层的 lowbit 都相同

            图论 邻接表  1466. 重新规划路线
            BFS  判断放在for里面 #130. 被围绕的区域
                 ★★一起跑BFS，而不是分开跑BFS。即全入队后一次BFS搞定，而不是每入一次队跑一次BFS
            循环队列 649. Dota2 参议院
            字典树 2352. 相等行列对 208. 实现 Trie (前缀树)
            map.getOrDefault(key,default) map.getOrDefault(preSum,0) 有则返回 否则返回0
            链表 快慢指针（quick slow,quick!=null && quick.next!=null ->>> slow = slow.next quick = quick.next.next）
            颠倒(reverse) 递归(思维) 归并(merge)
            栈和队列用linkedlist
            优先队列(堆 heap) leetcode215/23.    Queue<ListNode> pq = new PriorityQueue<>(new Comparator<ListNode>() {
                                        @Override
                                        public int compare(ListNode o1, ListNode o2) {
                                            return o1.val-o2.val;
                                        }
                                    });
            二叉树的层序遍历102 199 994
               while(!queue.isEmpty()){
                        int count = queue.size();
                        //cntList = new LinkedList<>();
                        cntList.clear();
                        while (count>0){
                            --count;

                            xxxxx
                        }
                    }
            注意初始的默认插入 0 -1 这些。
            单调队列 单调栈 239 42 739  84  32 初始栈可加入-1 参考84

//快速幂 c++ 70. 爬楼梯
            int qpow(int a, int n){
                int ans = 1;
                while(n){
                    if(n&1)        //如果n的当前末位为1
                        ans *= a;  //ans乘上当前的a
                    a *= a;        //a自乘
                    n >>= 1;       //n往右移一位
                }
                return ans;
            }

dp:
LIS:最长递增子序列/最长上升子序列 leetcode300 堆箱子 面试题 17.08. 马戏团人塔
    (n2 ,nlogn )
LCS:最长公共子序列
                for x = 0 to n do
                    for y = 0 to m do
                        if (x == 0 || y == 0) then
                            LCS(x, y) = 0
                        else if (Ax == By) then
                            LCS(x, y) =  LCS(x - 1,y - 1) + 1
                        else
                            LCS(x, y) = ) max(LCS(x – 1, y) , LCS(x, y – 1))
                        endif
                    endfor
                endfor
区间DP：DP[L,R] = DP[L,K] + DP[K+1,R] + cost[L,R,K] //面试题 08.14. 布尔运算
数位区间：【数位DP详解】 https://www.bilibili.com/video/BV1Fc411h76q/ 面试题 17.06. 2出现的次数  | 1012. 至少有 1 位重复的数字
            int[][]dp;
                //pos -- 当前位
                //pre_num -- 前一个数字 --题目要求
                //flag -- 约束条件
                //jump -- 是否跳过位数
                //例题 Windy数
                private int dfs(int pos ,int pre_num,boolean flag,boolean jump){
                    if(pos <= 0)
                        return 1;
                    if(!flag && dp[pos][pre_num]!=-1)
                        return dp[pos][pre_num];
                    int max_num = 0;
                    if(flag){
                        max_num = s[pos];
                    }else {
                        max_num = 9;
                    }
                    int ret = 0;
                    for(int i = 0;i <= max_num;++i){
                        if(true)
                            ret +=dfs(pos-1,i,flag && (i == s[pos]));
                    }
                    if(!flag)
                        dp[pos][pre_num] = ret;
                    return ret;
                }
            // 01背包 完全背包 多重背包
            w[]重量数组 c[]花费数组 s[]数量数组
            dp[][]
            dp[]
            --01背包 -每个物品只有一个
            for(int i = 1;i<=n;++i){
                for(int j = 1;j<=m;++j){
                    if(j < w[i]){
                        dp[i][j] = dp[i-1][j];
                    }
                    else { 拿/不拿
                        dp[i][j] = max(dp[i-1][j],dp[i-1][j - w[i]] + c[i])
                    }
                }
            }
            for(int i = 1;i<=n;++i){
                for(int j = m;j>=1;--j){
                     if(j >= w[i])
                     dp[j] = max(dp[j],[j - w[i]] + c[i])
                }
            }
            --完全背包 -每个物品无穷多个
            for(int i = 1;i<=n;++i){
                for(int j = w[i];j<=m;++j){
                     if(j >= w[i])
                     dp[j] = max(dp[j],[j - w[i]] + c[i])
                }
            }
            --多重背包 -每个物品有限个
            for(int i = 1;i<=n;++i){
                for(int j = m;j>=1;--j){
                   for(int k = 0; k <=s[i] && j >= k * w[i];++k){
                        dp[j] = max(dp[j],dp[j - k * w[i]] + k * c[i]);
                   }
                }
            }
//数学 gcd函数 面试题 16.14. 最佳直线
    private int  gcd(int a, int b){
        if(b==0){
            return a;}
        return gcd(b,a%b);
    }
//滑动窗口(反转数据 求最长连续) int l = 0; int r = 0;int k = ? 1004. 最大连续1的个数 III
//并查集  面试题 17.07. 婴儿名字
//倒排索引 : 思维转变一下，不是把两个数组比较，看有没有重复的。而是每次的数字出现，都去检查一下是否出现过，在哪个数组里出现的
   -- 面试题 17.26. 稀疏相似度
//排序后保留原来索引  2542. 最大子序列的分数
//逆序对 统计 使用归并排序 LCR 170. 交易逆序对的总数